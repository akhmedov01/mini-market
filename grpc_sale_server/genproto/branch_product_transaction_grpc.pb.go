// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: branch_product_transaction.proto

package sale_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BranchTransactionServerClient is the client API for BranchTransactionServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BranchTransactionServerClient interface {
	Create(ctx context.Context, in *CreateBranchTransaction, opts ...grpc.CallOption) (*IdRequest, error)
	Update(ctx context.Context, in *BranchTransaction, opts ...grpc.CallOption) (*ResponseString, error)
	Get(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*BranchTransaction, error)
	Delete(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*ResponseString, error)
	GetAll(ctx context.Context, in *GetAllBranchTransactionRequest, opts ...grpc.CallOption) (*GetAllBranchTransactionResponse, error)
}

type branchTransactionServerClient struct {
	cc grpc.ClientConnInterface
}

func NewBranchTransactionServerClient(cc grpc.ClientConnInterface) BranchTransactionServerClient {
	return &branchTransactionServerClient{cc}
}

func (c *branchTransactionServerClient) Create(ctx context.Context, in *CreateBranchTransaction, opts ...grpc.CallOption) (*IdRequest, error) {
	out := new(IdRequest)
	err := c.cc.Invoke(ctx, "/sale_service.BranchTransactionServer/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchTransactionServerClient) Update(ctx context.Context, in *BranchTransaction, opts ...grpc.CallOption) (*ResponseString, error) {
	out := new(ResponseString)
	err := c.cc.Invoke(ctx, "/sale_service.BranchTransactionServer/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchTransactionServerClient) Get(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*BranchTransaction, error) {
	out := new(BranchTransaction)
	err := c.cc.Invoke(ctx, "/sale_service.BranchTransactionServer/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchTransactionServerClient) Delete(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*ResponseString, error) {
	out := new(ResponseString)
	err := c.cc.Invoke(ctx, "/sale_service.BranchTransactionServer/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchTransactionServerClient) GetAll(ctx context.Context, in *GetAllBranchTransactionRequest, opts ...grpc.CallOption) (*GetAllBranchTransactionResponse, error) {
	out := new(GetAllBranchTransactionResponse)
	err := c.cc.Invoke(ctx, "/sale_service.BranchTransactionServer/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BranchTransactionServerServer is the server API for BranchTransactionServer service.
// All implementations must embed UnimplementedBranchTransactionServerServer
// for forward compatibility
type BranchTransactionServerServer interface {
	Create(context.Context, *CreateBranchTransaction) (*IdRequest, error)
	Update(context.Context, *BranchTransaction) (*ResponseString, error)
	Get(context.Context, *IdRequest) (*BranchTransaction, error)
	Delete(context.Context, *IdRequest) (*ResponseString, error)
	GetAll(context.Context, *GetAllBranchTransactionRequest) (*GetAllBranchTransactionResponse, error)
	mustEmbedUnimplementedBranchTransactionServerServer()
}

// UnimplementedBranchTransactionServerServer must be embedded to have forward compatible implementations.
type UnimplementedBranchTransactionServerServer struct {
}

func (UnimplementedBranchTransactionServerServer) Create(context.Context, *CreateBranchTransaction) (*IdRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBranchTransactionServerServer) Update(context.Context, *BranchTransaction) (*ResponseString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedBranchTransactionServerServer) Get(context.Context, *IdRequest) (*BranchTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBranchTransactionServerServer) Delete(context.Context, *IdRequest) (*ResponseString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBranchTransactionServerServer) GetAll(context.Context, *GetAllBranchTransactionRequest) (*GetAllBranchTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedBranchTransactionServerServer) mustEmbedUnimplementedBranchTransactionServerServer() {
}

// UnsafeBranchTransactionServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BranchTransactionServerServer will
// result in compilation errors.
type UnsafeBranchTransactionServerServer interface {
	mustEmbedUnimplementedBranchTransactionServerServer()
}

func RegisterBranchTransactionServerServer(s grpc.ServiceRegistrar, srv BranchTransactionServerServer) {
	s.RegisterService(&BranchTransactionServer_ServiceDesc, srv)
}

func _BranchTransactionServer_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBranchTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchTransactionServerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale_service.BranchTransactionServer/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchTransactionServerServer).Create(ctx, req.(*CreateBranchTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchTransactionServer_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BranchTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchTransactionServerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale_service.BranchTransactionServer/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchTransactionServerServer).Update(ctx, req.(*BranchTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchTransactionServer_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchTransactionServerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale_service.BranchTransactionServer/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchTransactionServerServer).Get(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchTransactionServer_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchTransactionServerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale_service.BranchTransactionServer/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchTransactionServerServer).Delete(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchTransactionServer_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllBranchTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchTransactionServerServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale_service.BranchTransactionServer/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchTransactionServerServer).GetAll(ctx, req.(*GetAllBranchTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BranchTransactionServer_ServiceDesc is the grpc.ServiceDesc for BranchTransactionServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BranchTransactionServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sale_service.BranchTransactionServer",
	HandlerType: (*BranchTransactionServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _BranchTransactionServer_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BranchTransactionServer_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _BranchTransactionServer_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BranchTransactionServer_Delete_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _BranchTransactionServer_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "branch_product_transaction.proto",
}
