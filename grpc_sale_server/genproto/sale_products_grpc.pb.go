// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: sale_products.proto

package sale_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SaleProductServerClient is the client API for SaleProductServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SaleProductServerClient interface {
	Create(ctx context.Context, in *CreateSaleProduct, opts ...grpc.CallOption) (*IdRequest, error)
	Update(ctx context.Context, in *SaleProduct, opts ...grpc.CallOption) (*ResponseString, error)
	Get(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*SaleProduct, error)
	Delete(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*ResponseString, error)
	GetAll(ctx context.Context, in *GetAllSaleProductRequest, opts ...grpc.CallOption) (*GetAllSaleProductResponse, error)
}

type saleProductServerClient struct {
	cc grpc.ClientConnInterface
}

func NewSaleProductServerClient(cc grpc.ClientConnInterface) SaleProductServerClient {
	return &saleProductServerClient{cc}
}

func (c *saleProductServerClient) Create(ctx context.Context, in *CreateSaleProduct, opts ...grpc.CallOption) (*IdRequest, error) {
	out := new(IdRequest)
	err := c.cc.Invoke(ctx, "/sale_service.SaleProductServer/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleProductServerClient) Update(ctx context.Context, in *SaleProduct, opts ...grpc.CallOption) (*ResponseString, error) {
	out := new(ResponseString)
	err := c.cc.Invoke(ctx, "/sale_service.SaleProductServer/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleProductServerClient) Get(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*SaleProduct, error) {
	out := new(SaleProduct)
	err := c.cc.Invoke(ctx, "/sale_service.SaleProductServer/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleProductServerClient) Delete(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*ResponseString, error) {
	out := new(ResponseString)
	err := c.cc.Invoke(ctx, "/sale_service.SaleProductServer/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleProductServerClient) GetAll(ctx context.Context, in *GetAllSaleProductRequest, opts ...grpc.CallOption) (*GetAllSaleProductResponse, error) {
	out := new(GetAllSaleProductResponse)
	err := c.cc.Invoke(ctx, "/sale_service.SaleProductServer/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SaleProductServerServer is the server API for SaleProductServer service.
// All implementations must embed UnimplementedSaleProductServerServer
// for forward compatibility
type SaleProductServerServer interface {
	Create(context.Context, *CreateSaleProduct) (*IdRequest, error)
	Update(context.Context, *SaleProduct) (*ResponseString, error)
	Get(context.Context, *IdRequest) (*SaleProduct, error)
	Delete(context.Context, *IdRequest) (*ResponseString, error)
	GetAll(context.Context, *GetAllSaleProductRequest) (*GetAllSaleProductResponse, error)
	mustEmbedUnimplementedSaleProductServerServer()
}

// UnimplementedSaleProductServerServer must be embedded to have forward compatible implementations.
type UnimplementedSaleProductServerServer struct {
}

func (UnimplementedSaleProductServerServer) Create(context.Context, *CreateSaleProduct) (*IdRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSaleProductServerServer) Update(context.Context, *SaleProduct) (*ResponseString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSaleProductServerServer) Get(context.Context, *IdRequest) (*SaleProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSaleProductServerServer) Delete(context.Context, *IdRequest) (*ResponseString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSaleProductServerServer) GetAll(context.Context, *GetAllSaleProductRequest) (*GetAllSaleProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedSaleProductServerServer) mustEmbedUnimplementedSaleProductServerServer() {}

// UnsafeSaleProductServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SaleProductServerServer will
// result in compilation errors.
type UnsafeSaleProductServerServer interface {
	mustEmbedUnimplementedSaleProductServerServer()
}

func RegisterSaleProductServerServer(s grpc.ServiceRegistrar, srv SaleProductServerServer) {
	s.RegisterService(&SaleProductServer_ServiceDesc, srv)
}

func _SaleProductServer_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSaleProduct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleProductServerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale_service.SaleProductServer/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleProductServerServer).Create(ctx, req.(*CreateSaleProduct))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleProductServer_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleProduct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleProductServerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale_service.SaleProductServer/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleProductServerServer).Update(ctx, req.(*SaleProduct))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleProductServer_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleProductServerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale_service.SaleProductServer/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleProductServerServer).Get(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleProductServer_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleProductServerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale_service.SaleProductServer/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleProductServerServer).Delete(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleProductServer_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSaleProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleProductServerServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sale_service.SaleProductServer/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleProductServerServer).GetAll(ctx, req.(*GetAllSaleProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SaleProductServer_ServiceDesc is the grpc.ServiceDesc for SaleProductServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SaleProductServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sale_service.SaleProductServer",
	HandlerType: (*SaleProductServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SaleProductServer_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SaleProductServer_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SaleProductServer_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SaleProductServer_Delete_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _SaleProductServer_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sale_products.proto",
}
