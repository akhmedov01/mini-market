// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: tarif.proto

package staff_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TarifServerClient is the client API for TarifServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TarifServerClient interface {
	// Sends a greeting
	Create(ctx context.Context, in *CreateTarif, opts ...grpc.CallOption) (*IdRequest, error)
	Update(ctx context.Context, in *Tarif, opts ...grpc.CallOption) (*ResponseString, error)
	Get(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Tarif, error)
	Delete(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*ResponseString, error)
	GetAll(ctx context.Context, in *GetAllTarifRequest, opts ...grpc.CallOption) (*GetAllTarifResponse, error)
}

type tarifServerClient struct {
	cc grpc.ClientConnInterface
}

func NewTarifServerClient(cc grpc.ClientConnInterface) TarifServerClient {
	return &tarifServerClient{cc}
}

func (c *tarifServerClient) Create(ctx context.Context, in *CreateTarif, opts ...grpc.CallOption) (*IdRequest, error) {
	out := new(IdRequest)
	err := c.cc.Invoke(ctx, "/staff_service.TarifServer/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tarifServerClient) Update(ctx context.Context, in *Tarif, opts ...grpc.CallOption) (*ResponseString, error) {
	out := new(ResponseString)
	err := c.cc.Invoke(ctx, "/staff_service.TarifServer/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tarifServerClient) Get(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Tarif, error) {
	out := new(Tarif)
	err := c.cc.Invoke(ctx, "/staff_service.TarifServer/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tarifServerClient) Delete(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*ResponseString, error) {
	out := new(ResponseString)
	err := c.cc.Invoke(ctx, "/staff_service.TarifServer/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tarifServerClient) GetAll(ctx context.Context, in *GetAllTarifRequest, opts ...grpc.CallOption) (*GetAllTarifResponse, error) {
	out := new(GetAllTarifResponse)
	err := c.cc.Invoke(ctx, "/staff_service.TarifServer/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TarifServerServer is the server API for TarifServer service.
// All implementations must embed UnimplementedTarifServerServer
// for forward compatibility
type TarifServerServer interface {
	// Sends a greeting
	Create(context.Context, *CreateTarif) (*IdRequest, error)
	Update(context.Context, *Tarif) (*ResponseString, error)
	Get(context.Context, *IdRequest) (*Tarif, error)
	Delete(context.Context, *IdRequest) (*ResponseString, error)
	GetAll(context.Context, *GetAllTarifRequest) (*GetAllTarifResponse, error)
	mustEmbedUnimplementedTarifServerServer()
}

// UnimplementedTarifServerServer must be embedded to have forward compatible implementations.
type UnimplementedTarifServerServer struct {
}

func (UnimplementedTarifServerServer) Create(context.Context, *CreateTarif) (*IdRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTarifServerServer) Update(context.Context, *Tarif) (*ResponseString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTarifServerServer) Get(context.Context, *IdRequest) (*Tarif, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTarifServerServer) Delete(context.Context, *IdRequest) (*ResponseString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTarifServerServer) GetAll(context.Context, *GetAllTarifRequest) (*GetAllTarifResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedTarifServerServer) mustEmbedUnimplementedTarifServerServer() {}

// UnsafeTarifServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TarifServerServer will
// result in compilation errors.
type UnsafeTarifServerServer interface {
	mustEmbedUnimplementedTarifServerServer()
}

func RegisterTarifServerServer(s grpc.ServiceRegistrar, srv TarifServerServer) {
	s.RegisterService(&TarifServer_ServiceDesc, srv)
}

func _TarifServer_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTarif)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TarifServerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staff_service.TarifServer/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TarifServerServer).Create(ctx, req.(*CreateTarif))
	}
	return interceptor(ctx, in, info, handler)
}

func _TarifServer_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tarif)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TarifServerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staff_service.TarifServer/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TarifServerServer).Update(ctx, req.(*Tarif))
	}
	return interceptor(ctx, in, info, handler)
}

func _TarifServer_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TarifServerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staff_service.TarifServer/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TarifServerServer).Get(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TarifServer_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TarifServerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staff_service.TarifServer/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TarifServerServer).Delete(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TarifServer_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTarifRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TarifServerServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staff_service.TarifServer/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TarifServerServer).GetAll(ctx, req.(*GetAllTarifRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TarifServer_ServiceDesc is the grpc.ServiceDesc for TarifServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TarifServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "staff_service.TarifServer",
	HandlerType: (*TarifServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TarifServer_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TarifServer_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TarifServer_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TarifServer_Delete_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _TarifServer_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tarif.proto",
}
