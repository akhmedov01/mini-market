// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: staff.proto

package staff_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StaffServerClient is the client API for StaffServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StaffServerClient interface {
	// Sends a greeting
	Create(ctx context.Context, in *CreateStaff, opts ...grpc.CallOption) (*IdRequest, error)
	Update(ctx context.Context, in *Staff, opts ...grpc.CallOption) (*ResponseString, error)
	Get(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Staff, error)
	Delete(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*ResponseString, error)
	GetAll(ctx context.Context, in *GetAllStaffRequest, opts ...grpc.CallOption) (*GetAllStaffResponse, error)
	ChangePassword(ctx context.Context, in *RequestByPassword, opts ...grpc.CallOption) (*ResponseString, error)
	UpdateBalance(ctx context.Context, in *UpdateBalanceRequest, opts ...grpc.CallOption) (*ResponseString, error)
	GetByUsername(ctx context.Context, in *RequestByUsername, opts ...grpc.CallOption) (*Staff, error)
}

type staffServerClient struct {
	cc grpc.ClientConnInterface
}

func NewStaffServerClient(cc grpc.ClientConnInterface) StaffServerClient {
	return &staffServerClient{cc}
}

func (c *staffServerClient) Create(ctx context.Context, in *CreateStaff, opts ...grpc.CallOption) (*IdRequest, error) {
	out := new(IdRequest)
	err := c.cc.Invoke(ctx, "/staff_service.StaffServer/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServerClient) Update(ctx context.Context, in *Staff, opts ...grpc.CallOption) (*ResponseString, error) {
	out := new(ResponseString)
	err := c.cc.Invoke(ctx, "/staff_service.StaffServer/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServerClient) Get(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Staff, error) {
	out := new(Staff)
	err := c.cc.Invoke(ctx, "/staff_service.StaffServer/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServerClient) Delete(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*ResponseString, error) {
	out := new(ResponseString)
	err := c.cc.Invoke(ctx, "/staff_service.StaffServer/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServerClient) GetAll(ctx context.Context, in *GetAllStaffRequest, opts ...grpc.CallOption) (*GetAllStaffResponse, error) {
	out := new(GetAllStaffResponse)
	err := c.cc.Invoke(ctx, "/staff_service.StaffServer/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServerClient) ChangePassword(ctx context.Context, in *RequestByPassword, opts ...grpc.CallOption) (*ResponseString, error) {
	out := new(ResponseString)
	err := c.cc.Invoke(ctx, "/staff_service.StaffServer/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServerClient) UpdateBalance(ctx context.Context, in *UpdateBalanceRequest, opts ...grpc.CallOption) (*ResponseString, error) {
	out := new(ResponseString)
	err := c.cc.Invoke(ctx, "/staff_service.StaffServer/UpdateBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServerClient) GetByUsername(ctx context.Context, in *RequestByUsername, opts ...grpc.CallOption) (*Staff, error) {
	out := new(Staff)
	err := c.cc.Invoke(ctx, "/staff_service.StaffServer/GetByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StaffServerServer is the server API for StaffServer service.
// All implementations must embed UnimplementedStaffServerServer
// for forward compatibility
type StaffServerServer interface {
	// Sends a greeting
	Create(context.Context, *CreateStaff) (*IdRequest, error)
	Update(context.Context, *Staff) (*ResponseString, error)
	Get(context.Context, *IdRequest) (*Staff, error)
	Delete(context.Context, *IdRequest) (*ResponseString, error)
	GetAll(context.Context, *GetAllStaffRequest) (*GetAllStaffResponse, error)
	ChangePassword(context.Context, *RequestByPassword) (*ResponseString, error)
	UpdateBalance(context.Context, *UpdateBalanceRequest) (*ResponseString, error)
	GetByUsername(context.Context, *RequestByUsername) (*Staff, error)
	mustEmbedUnimplementedStaffServerServer()
}

// UnimplementedStaffServerServer must be embedded to have forward compatible implementations.
type UnimplementedStaffServerServer struct {
}

func (UnimplementedStaffServerServer) Create(context.Context, *CreateStaff) (*IdRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedStaffServerServer) Update(context.Context, *Staff) (*ResponseString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedStaffServerServer) Get(context.Context, *IdRequest) (*Staff, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedStaffServerServer) Delete(context.Context, *IdRequest) (*ResponseString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedStaffServerServer) GetAll(context.Context, *GetAllStaffRequest) (*GetAllStaffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedStaffServerServer) ChangePassword(context.Context, *RequestByPassword) (*ResponseString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedStaffServerServer) UpdateBalance(context.Context, *UpdateBalanceRequest) (*ResponseString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBalance not implemented")
}
func (UnimplementedStaffServerServer) GetByUsername(context.Context, *RequestByUsername) (*Staff, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByUsername not implemented")
}
func (UnimplementedStaffServerServer) mustEmbedUnimplementedStaffServerServer() {}

// UnsafeStaffServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StaffServerServer will
// result in compilation errors.
type UnsafeStaffServerServer interface {
	mustEmbedUnimplementedStaffServerServer()
}

func RegisterStaffServerServer(s grpc.ServiceRegistrar, srv StaffServerServer) {
	s.RegisterService(&StaffServer_ServiceDesc, srv)
}

func _StaffServer_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStaff)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staff_service.StaffServer/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServerServer).Create(ctx, req.(*CreateStaff))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffServer_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Staff)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staff_service.StaffServer/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServerServer).Update(ctx, req.(*Staff))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffServer_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staff_service.StaffServer/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServerServer).Get(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffServer_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staff_service.StaffServer/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServerServer).Delete(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffServer_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllStaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServerServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staff_service.StaffServer/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServerServer).GetAll(ctx, req.(*GetAllStaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffServer_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServerServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staff_service.StaffServer/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServerServer).ChangePassword(ctx, req.(*RequestByPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffServer_UpdateBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServerServer).UpdateBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staff_service.StaffServer/UpdateBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServerServer).UpdateBalance(ctx, req.(*UpdateBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffServer_GetByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServerServer).GetByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staff_service.StaffServer/GetByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServerServer).GetByUsername(ctx, req.(*RequestByUsername))
	}
	return interceptor(ctx, in, info, handler)
}

// StaffServer_ServiceDesc is the grpc.ServiceDesc for StaffServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StaffServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "staff_service.StaffServer",
	HandlerType: (*StaffServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _StaffServer_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _StaffServer_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _StaffServer_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _StaffServer_Delete_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _StaffServer_GetAll_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _StaffServer_ChangePassword_Handler,
		},
		{
			MethodName: "UpdateBalance",
			Handler:    _StaffServer_UpdateBalance_Handler,
		},
		{
			MethodName: "GetByUsername",
			Handler:    _StaffServer_GetByUsername_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "staff.proto",
}
